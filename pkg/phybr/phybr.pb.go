// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: phybr.proto

package phybr

import (
	"fmt"
	"io"
	"math"

	proto "github.com/golang/protobuf/proto"

	_ "github.com/gogo/protobuf/gogoproto"

	context "golang.org/x/net/context"

	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RegionMeta struct {
	RegionId             uint64   `protobuf:"varint,1,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	AppliedIndex         uint64   `protobuf:"varint,2,opt,name=applied_index,json=appliedIndex,proto3" json:"applied_index,omitempty"`
	Term                 uint64   `protobuf:"varint,3,opt,name=term,proto3" json:"term,omitempty"`
	Version              uint64   `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
	Tombstone            bool     `protobuf:"varint,5,opt,name=tombstone,proto3" json:"tombstone,omitempty"`
	StartKey             []byte   `protobuf:"bytes,6,opt,name=start_key,json=startKey,proto3" json:"start_key,omitempty"`
	EndKey               []byte   `protobuf:"bytes,7,opt,name=end_key,json=endKey,proto3" json:"end_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegionMeta) Reset()         { *m = RegionMeta{} }
func (m *RegionMeta) String() string { return proto.CompactTextString(m) }
func (*RegionMeta) ProtoMessage()    {}
func (*RegionMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_phybr_8b825b079afd19f3, []int{0}
}
func (m *RegionMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegionMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegionMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RegionMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegionMeta.Merge(dst, src)
}
func (m *RegionMeta) XXX_Size() int {
	return m.Size()
}
func (m *RegionMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_RegionMeta.DiscardUnknown(m)
}

var xxx_messageInfo_RegionMeta proto.InternalMessageInfo

func (m *RegionMeta) GetRegionId() uint64 {
	if m != nil {
		return m.RegionId
	}
	return 0
}

func (m *RegionMeta) GetAppliedIndex() uint64 {
	if m != nil {
		return m.AppliedIndex
	}
	return 0
}

func (m *RegionMeta) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *RegionMeta) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *RegionMeta) GetTombstone() bool {
	if m != nil {
		return m.Tombstone
	}
	return false
}

func (m *RegionMeta) GetStartKey() []byte {
	if m != nil {
		return m.StartKey
	}
	return nil
}

func (m *RegionMeta) GetEndKey() []byte {
	if m != nil {
		return m.EndKey
	}
	return nil
}

type RegionRecover struct {
	RegionId             uint64   `protobuf:"varint,1,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	Term                 uint64   `protobuf:"varint,2,opt,name=term,proto3" json:"term,omitempty"`
	Silence              bool     `protobuf:"varint,3,opt,name=silence,proto3" json:"silence,omitempty"`
	Tombstone            bool     `protobuf:"varint,4,opt,name=tombstone,proto3" json:"tombstone,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegionRecover) Reset()         { *m = RegionRecover{} }
func (m *RegionRecover) String() string { return proto.CompactTextString(m) }
func (*RegionRecover) ProtoMessage()    {}
func (*RegionRecover) Descriptor() ([]byte, []int) {
	return fileDescriptor_phybr_8b825b079afd19f3, []int{1}
}
func (m *RegionRecover) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegionRecover) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegionRecover.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RegionRecover) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegionRecover.Merge(dst, src)
}
func (m *RegionRecover) XXX_Size() int {
	return m.Size()
}
func (m *RegionRecover) XXX_DiscardUnknown() {
	xxx_messageInfo_RegionRecover.DiscardUnknown(m)
}

var xxx_messageInfo_RegionRecover proto.InternalMessageInfo

func (m *RegionRecover) GetRegionId() uint64 {
	if m != nil {
		return m.RegionId
	}
	return 0
}

func (m *RegionRecover) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *RegionRecover) GetSilence() bool {
	if m != nil {
		return m.Silence
	}
	return false
}

func (m *RegionRecover) GetTombstone() bool {
	if m != nil {
		return m.Tombstone
	}
	return false
}

type CloseRequest struct {
	Workdone             bool     `protobuf:"varint,1,opt,name=workdone,proto3" json:"workdone,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CloseRequest) Reset()         { *m = CloseRequest{} }
func (m *CloseRequest) String() string { return proto.CompactTextString(m) }
func (*CloseRequest) ProtoMessage()    {}
func (*CloseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_phybr_8b825b079afd19f3, []int{2}
}
func (m *CloseRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CloseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CloseRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CloseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloseRequest.Merge(dst, src)
}
func (m *CloseRequest) XXX_Size() int {
	return m.Size()
}
func (m *CloseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CloseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CloseRequest proto.InternalMessageInfo

func (m *CloseRequest) GetWorkdone() bool {
	if m != nil {
		return m.Workdone
	}
	return false
}

type CloseReply struct {
	Ok                   string   `protobuf:"bytes,1,opt,name=ok,proto3" json:"ok,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CloseReply) Reset()         { *m = CloseReply{} }
func (m *CloseReply) String() string { return proto.CompactTextString(m) }
func (*CloseReply) ProtoMessage()    {}
func (*CloseReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_phybr_8b825b079afd19f3, []int{3}
}
func (m *CloseReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CloseReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CloseReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CloseReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloseReply.Merge(dst, src)
}
func (m *CloseReply) XXX_Size() int {
	return m.Size()
}
func (m *CloseReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CloseReply.DiscardUnknown(m)
}

var xxx_messageInfo_CloseReply proto.InternalMessageInfo

func (m *CloseReply) GetOk() string {
	if m != nil {
		return m.Ok
	}
	return ""
}

type ResolvedRequest struct {
	Start                uint64   `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResolvedRequest) Reset()         { *m = ResolvedRequest{} }
func (m *ResolvedRequest) String() string { return proto.CompactTextString(m) }
func (*ResolvedRequest) ProtoMessage()    {}
func (*ResolvedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_phybr_8b825b079afd19f3, []int{4}
}
func (m *ResolvedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResolvedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResolvedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ResolvedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResolvedRequest.Merge(dst, src)
}
func (m *ResolvedRequest) XXX_Size() int {
	return m.Size()
}
func (m *ResolvedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ResolvedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ResolvedRequest proto.InternalMessageInfo

func (m *ResolvedRequest) GetStart() uint64 {
	if m != nil {
		return m.Start
	}
	return 0
}

type ResolvedReply struct {
	ResolvedTs           uint64   `protobuf:"varint,1,opt,name=resolved_ts,json=resolvedTs,proto3" json:"resolved_ts,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResolvedReply) Reset()         { *m = ResolvedReply{} }
func (m *ResolvedReply) String() string { return proto.CompactTextString(m) }
func (*ResolvedReply) ProtoMessage()    {}
func (*ResolvedReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_phybr_8b825b079afd19f3, []int{5}
}
func (m *ResolvedReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResolvedReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResolvedReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ResolvedReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResolvedReply.Merge(dst, src)
}
func (m *ResolvedReply) XXX_Size() int {
	return m.Size()
}
func (m *ResolvedReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ResolvedReply.DiscardUnknown(m)
}

var xxx_messageInfo_ResolvedReply proto.InternalMessageInfo

func (m *ResolvedReply) GetResolvedTs() uint64 {
	if m != nil {
		return m.ResolvedTs
	}
	return 0
}

func init() {
	proto.RegisterType((*RegionMeta)(nil), "phybr.RegionMeta")
	proto.RegisterType((*RegionRecover)(nil), "phybr.RegionRecover")
	proto.RegisterType((*CloseRequest)(nil), "phybr.CloseRequest")
	proto.RegisterType((*CloseReply)(nil), "phybr.CloseReply")
	proto.RegisterType((*ResolvedRequest)(nil), "phybr.ResolvedRequest")
	proto.RegisterType((*ResolvedReply)(nil), "phybr.ResolvedReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Phybr service

type PhybrClient interface {
	RecoverRegions(ctx context.Context, opts ...grpc.CallOption) (Phybr_RecoverRegionsClient, error)
	Close(ctx context.Context, in *CloseRequest, opts ...grpc.CallOption) (*CloseReply, error)
	Resolve(ctx context.Context, in *ResolvedRequest, opts ...grpc.CallOption) (*ResolvedReply, error)
}

type phybrClient struct {
	cc *grpc.ClientConn
}

func NewPhybrClient(cc *grpc.ClientConn) PhybrClient {
	return &phybrClient{cc}
}

func (c *phybrClient) RecoverRegions(ctx context.Context, opts ...grpc.CallOption) (Phybr_RecoverRegionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Phybr_serviceDesc.Streams[0], "/phybr.Phybr/recover_regions", opts...)
	if err != nil {
		return nil, err
	}
	x := &phybrRecoverRegionsClient{stream}
	return x, nil
}

type Phybr_RecoverRegionsClient interface {
	Send(*RegionMeta) error
	Recv() (*RegionRecover, error)
	grpc.ClientStream
}

type phybrRecoverRegionsClient struct {
	grpc.ClientStream
}

func (x *phybrRecoverRegionsClient) Send(m *RegionMeta) error {
	return x.ClientStream.SendMsg(m)
}

func (x *phybrRecoverRegionsClient) Recv() (*RegionRecover, error) {
	m := new(RegionRecover)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *phybrClient) Close(ctx context.Context, in *CloseRequest, opts ...grpc.CallOption) (*CloseReply, error) {
	out := new(CloseReply)
	err := c.cc.Invoke(ctx, "/phybr.Phybr/close", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *phybrClient) Resolve(ctx context.Context, in *ResolvedRequest, opts ...grpc.CallOption) (*ResolvedReply, error) {
	out := new(ResolvedReply)
	err := c.cc.Invoke(ctx, "/phybr.Phybr/resolve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Phybr service

type PhybrServer interface {
	RecoverRegions(Phybr_RecoverRegionsServer) error
	Close(context.Context, *CloseRequest) (*CloseReply, error)
	Resolve(context.Context, *ResolvedRequest) (*ResolvedReply, error)
}

func RegisterPhybrServer(s *grpc.Server, srv PhybrServer) {
	s.RegisterService(&_Phybr_serviceDesc, srv)
}

func _Phybr_RecoverRegions_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PhybrServer).RecoverRegions(&phybrRecoverRegionsServer{stream})
}

type Phybr_RecoverRegionsServer interface {
	Send(*RegionRecover) error
	Recv() (*RegionMeta, error)
	grpc.ServerStream
}

type phybrRecoverRegionsServer struct {
	grpc.ServerStream
}

func (x *phybrRecoverRegionsServer) Send(m *RegionRecover) error {
	return x.ServerStream.SendMsg(m)
}

func (x *phybrRecoverRegionsServer) Recv() (*RegionMeta, error) {
	m := new(RegionMeta)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Phybr_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhybrServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/phybr.Phybr/Close",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhybrServer).Close(ctx, req.(*CloseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Phybr_Resolve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolvedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhybrServer).Resolve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/phybr.Phybr/Resolve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhybrServer).Resolve(ctx, req.(*ResolvedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Phybr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "phybr.Phybr",
	HandlerType: (*PhybrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "close",
			Handler:    _Phybr_Close_Handler,
		},
		{
			MethodName: "resolve",
			Handler:    _Phybr_Resolve_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "recover_regions",
			Handler:       _Phybr_RecoverRegions_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "phybr.proto",
}

func (m *RegionMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegionMeta) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RegionId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPhybr(dAtA, i, uint64(m.RegionId))
	}
	if m.AppliedIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPhybr(dAtA, i, uint64(m.AppliedIndex))
	}
	if m.Term != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPhybr(dAtA, i, uint64(m.Term))
	}
	if m.Version != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPhybr(dAtA, i, uint64(m.Version))
	}
	if m.Tombstone {
		dAtA[i] = 0x28
		i++
		if m.Tombstone {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.StartKey) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPhybr(dAtA, i, uint64(len(m.StartKey)))
		i += copy(dAtA[i:], m.StartKey)
	}
	if len(m.EndKey) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintPhybr(dAtA, i, uint64(len(m.EndKey)))
		i += copy(dAtA[i:], m.EndKey)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RegionRecover) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegionRecover) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RegionId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPhybr(dAtA, i, uint64(m.RegionId))
	}
	if m.Term != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPhybr(dAtA, i, uint64(m.Term))
	}
	if m.Silence {
		dAtA[i] = 0x18
		i++
		if m.Silence {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Tombstone {
		dAtA[i] = 0x20
		i++
		if m.Tombstone {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CloseRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloseRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Workdone {
		dAtA[i] = 0x8
		i++
		if m.Workdone {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CloseReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloseReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ok) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPhybr(dAtA, i, uint64(len(m.Ok)))
		i += copy(dAtA[i:], m.Ok)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ResolvedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResolvedRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Start != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPhybr(dAtA, i, uint64(m.Start))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ResolvedReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResolvedReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ResolvedTs != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPhybr(dAtA, i, uint64(m.ResolvedTs))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintPhybr(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RegionMeta) Size() (n int) {
	var l int
	_ = l
	if m.RegionId != 0 {
		n += 1 + sovPhybr(uint64(m.RegionId))
	}
	if m.AppliedIndex != 0 {
		n += 1 + sovPhybr(uint64(m.AppliedIndex))
	}
	if m.Term != 0 {
		n += 1 + sovPhybr(uint64(m.Term))
	}
	if m.Version != 0 {
		n += 1 + sovPhybr(uint64(m.Version))
	}
	if m.Tombstone {
		n += 2
	}
	l = len(m.StartKey)
	if l > 0 {
		n += 1 + l + sovPhybr(uint64(l))
	}
	l = len(m.EndKey)
	if l > 0 {
		n += 1 + l + sovPhybr(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RegionRecover) Size() (n int) {
	var l int
	_ = l
	if m.RegionId != 0 {
		n += 1 + sovPhybr(uint64(m.RegionId))
	}
	if m.Term != 0 {
		n += 1 + sovPhybr(uint64(m.Term))
	}
	if m.Silence {
		n += 2
	}
	if m.Tombstone {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CloseRequest) Size() (n int) {
	var l int
	_ = l
	if m.Workdone {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CloseReply) Size() (n int) {
	var l int
	_ = l
	l = len(m.Ok)
	if l > 0 {
		n += 1 + l + sovPhybr(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResolvedRequest) Size() (n int) {
	var l int
	_ = l
	if m.Start != 0 {
		n += 1 + sovPhybr(uint64(m.Start))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResolvedReply) Size() (n int) {
	var l int
	_ = l
	if m.ResolvedTs != 0 {
		n += 1 + sovPhybr(uint64(m.ResolvedTs))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPhybr(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPhybr(x uint64) (n int) {
	return sovPhybr(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RegionMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhybr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegionMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegionMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegionId", wireType)
			}
			m.RegionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhybr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RegionId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppliedIndex", wireType)
			}
			m.AppliedIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhybr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppliedIndex |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Term", wireType)
			}
			m.Term = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhybr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Term |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhybr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tombstone", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhybr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Tombstone = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhybr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPhybr
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartKey = append(m.StartKey[:0], dAtA[iNdEx:postIndex]...)
			if m.StartKey == nil {
				m.StartKey = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhybr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPhybr
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndKey = append(m.EndKey[:0], dAtA[iNdEx:postIndex]...)
			if m.EndKey == nil {
				m.EndKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPhybr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPhybr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegionRecover) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhybr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegionRecover: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegionRecover: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegionId", wireType)
			}
			m.RegionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhybr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RegionId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Term", wireType)
			}
			m.Term = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhybr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Term |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Silence", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhybr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Silence = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tombstone", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhybr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Tombstone = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPhybr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPhybr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloseRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhybr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloseRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloseRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Workdone", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhybr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Workdone = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPhybr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPhybr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloseReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhybr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloseReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloseReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhybr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhybr
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ok = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPhybr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPhybr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResolvedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhybr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResolvedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResolvedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			m.Start = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhybr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Start |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPhybr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPhybr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResolvedReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhybr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResolvedReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResolvedReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResolvedTs", wireType)
			}
			m.ResolvedTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhybr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResolvedTs |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPhybr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPhybr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPhybr(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPhybr
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPhybr
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPhybr
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPhybr
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPhybr
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPhybr(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPhybr = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPhybr   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("phybr.proto", fileDescriptor_phybr_8b825b079afd19f3) }

var fileDescriptor_phybr_8b825b079afd19f3 = []byte{
	// 442 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x86, 0xb3, 0x21, 0x4e, 0x9c, 0x69, 0x4a, 0xd4, 0x21, 0x02, 0xcb, 0x54, 0x21, 0x5a, 0x0e,
	0x44, 0x1c, 0x4a, 0x81, 0x13, 0x37, 0x04, 0xa7, 0xaa, 0x42, 0x42, 0x2b, 0xee, 0x56, 0x12, 0x8f,
	0x82, 0x15, 0xd7, 0x6b, 0x76, 0xb7, 0xa1, 0x7e, 0x13, 0x1e, 0x81, 0x37, 0xe0, 0x15, 0x38, 0xf6,
	0xc8, 0x11, 0x85, 0x17, 0x41, 0x1e, 0xdb, 0x4d, 0xcc, 0x81, 0xdb, 0xfe, 0xdf, 0xfc, 0xda, 0xfd,
	0xff, 0xd5, 0xc0, 0x51, 0xfe, 0xb9, 0x58, 0x9a, 0xb3, 0xdc, 0x68, 0xa7, 0xd1, 0x63, 0x11, 0x4e,
	0xd6, 0x7a, 0xad, 0x99, 0xbc, 0x28, 0x4f, 0xd5, 0x30, 0x1c, 0x9b, 0x6b, 0xeb, 0xf8, 0x58, 0x01,
	0x79, 0x2b, 0x00, 0x14, 0xad, 0x13, 0x9d, 0x7d, 0x20, 0xb7, 0xc0, 0xc7, 0x30, 0x34, 0xac, 0xa2,
	0x24, 0x0e, 0xc4, 0x4c, 0xcc, 0x7b, 0xca, 0xaf, 0xc0, 0x45, 0x8c, 0x4f, 0xe1, 0x78, 0x91, 0xe7,
	0x69, 0x42, 0x71, 0x94, 0x64, 0x31, 0xdd, 0x04, 0x5d, 0x36, 0x8c, 0x6a, 0x78, 0x51, 0x32, 0x44,
	0xe8, 0x39, 0x32, 0x57, 0xc1, 0x3d, 0x9e, 0xf1, 0x19, 0x03, 0x18, 0x6c, 0xc9, 0xd8, 0x44, 0x67,
	0x41, 0x8f, 0x71, 0x23, 0xf1, 0x14, 0x86, 0x4e, 0x5f, 0x2d, 0xad, 0xd3, 0x19, 0x05, 0xde, 0x4c,
	0xcc, 0x7d, 0xb5, 0x07, 0x65, 0x1a, 0xeb, 0x16, 0xc6, 0x45, 0x1b, 0x2a, 0x82, 0xfe, 0x4c, 0xcc,
	0x47, 0xca, 0x67, 0x70, 0x49, 0x05, 0x3e, 0x82, 0x01, 0x65, 0x31, 0x8f, 0x06, 0x3c, 0xea, 0x53,
	0x16, 0x5f, 0x52, 0x21, 0x6f, 0xe0, 0xb8, 0x6a, 0xa4, 0x68, 0xa5, 0xb7, 0x64, 0xfe, 0x5f, 0xaa,
	0xc9, 0xdb, 0x6d, 0xe7, 0xb5, 0x49, 0x4a, 0xd9, 0x8a, 0xb8, 0x86, 0xaf, 0x1a, 0xd9, 0xce, 0xdb,
	0xfb, 0x27, 0xaf, 0x7c, 0x0e, 0xa3, 0xf7, 0xa9, 0xb6, 0xa4, 0xe8, 0xcb, 0x35, 0x59, 0x87, 0x21,
	0xf8, 0x5f, 0xb5, 0xd9, 0xc4, 0xa5, 0x59, 0xb0, 0xf9, 0x4e, 0xcb, 0x53, 0x80, 0xda, 0x9b, 0xa7,
	0x05, 0xde, 0x87, 0xae, 0xde, 0xb0, 0x67, 0xa8, 0xba, 0x7a, 0x23, 0x9f, 0xc1, 0x58, 0x91, 0xd5,
	0xe9, 0x96, 0xe2, 0xe6, 0xb2, 0x09, 0x78, 0xdc, 0xbd, 0x6e, 0x50, 0x09, 0x79, 0x5e, 0x96, 0x6d,
	0x8c, 0xe5, 0x4d, 0x4f, 0xe0, 0xc8, 0xd4, 0x20, 0x72, 0xb6, 0x36, 0x43, 0x83, 0x3e, 0xd9, 0x57,
	0x3f, 0x04, 0x78, 0x1f, 0xcb, 0x15, 0xc1, 0xb7, 0x30, 0x36, 0xd5, 0x17, 0x45, 0xd5, 0x77, 0x58,
	0x3c, 0x39, 0xab, 0x56, 0x69, 0xbf, 0x12, 0xe1, 0xa4, 0x85, 0xea, 0x3f, 0x95, 0x9d, 0xb9, 0x38,
	0x17, 0xf8, 0x12, 0xbc, 0x55, 0x59, 0x02, 0x1f, 0xd4, 0xa6, 0xc3, 0xfa, 0xe1, 0x49, 0x1b, 0xe6,
	0x69, 0x21, 0x3b, 0xf8, 0x06, 0x06, 0x75, 0x18, 0x7c, 0x78, 0x77, 0x73, 0xab, 0xe9, 0xc1, 0x8b,
	0x07, 0xc5, 0x64, 0xe7, 0xdd, 0xe4, 0xd7, 0x77, 0x5f, 0xfc, 0xdc, 0x4d, 0xc5, 0xed, 0x6e, 0x2a,
	0x7e, 0xef, 0xa6, 0xe2, 0xdb, 0x9f, 0x69, 0x67, 0xd9, 0xe7, 0x45, 0x7e, 0xfd, 0x37, 0x00, 0x00,
	0xff, 0xff, 0x37, 0x45, 0x87, 0xd8, 0x05, 0x03, 0x00, 0x00,
}
